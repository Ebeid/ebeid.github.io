<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Z3 on Ebeid ElSayed</title>
    <link>https://ebeid.github.io/tags/z3/</link>
    <description>Recent content in Z3 on Ebeid ElSayed</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 01 Aug 2013 16:24:00 -0500</lastBuildDate>
    
	<atom:link href="https://ebeid.github.io/tags/z3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Convert Microsoft Pex path conditions from Z3 native format to SMT-LIB</title>
      <link>https://ebeid.github.io/blog/2013-08-01-convert-microsoft-pex-path-conditions.html/</link>
      <pubDate>Thu, 01 Aug 2013 16:24:00 -0500</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-08-01-convert-microsoft-pex-path-conditions.html/</guid>
      <description>We talked before about getting the code path conditions from Microsoft Pex as in Z3 native format(.z3 file).
Sometimes you may need to convert from Z3 native format to SMT-LIB standard. You can do that using the Z3 C# APIs. The only trick here is: you have to use the Microsoft.Z3.dll that come with your current Microsoft Pex installation (C:\Program Files\Microsoft Pex\bin\Microsoft.Z3.dll).
To show how it works, letâ€™s create a new C# console application.</description>
    </item>
    
    <item>
      <title>The Z3 Constraint Solver, a developer perspective</title>
      <link>https://ebeid.github.io/blog/2013-07-30-the-z3-constraint-solver-developer.html/</link>
      <pubDate>Tue, 30 Jul 2013 06:30:00 -0500</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-07-30-the-z3-constraint-solver-developer.html/</guid>
      <description>Z3 is a high-performance SMT solver developed at Microsoft Research. It have been integrated with many many tools that came out from Microsoft for program analysis, testing, and verification.
What SAT means ? SAT refers to Boolean satisfiability problem where we want to determine if there exists an interpretation that satisfies a given Boolean formula. In other words, it establishes if the variables of a given Boolean formula can be assigned in such a way as to make the formula evaluate to true.</description>
    </item>
    
    <item>
      <title>Get path conditions from Microsoft Pex</title>
      <link>https://ebeid.github.io/blog/2013-07-24-get-path-conditions-from-microsoft-pex.html/</link>
      <pubDate>Wed, 24 Jul 2013 17:26:00 -0500</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-07-24-get-path-conditions-from-microsoft-pex.html/</guid>
      <description>We talked in a previous post about Microsoft Pex and how it choose values to explore your code through symbolically executing it and getting all its paths. A code path is the represented by all the conditions that have to be satisfied in order to make the code execution go to this path. Your code conditional statements will lead to different paths according to different input values. Test cases generated by Pex represents the code behavior for specific input values that lead to specific code path.</description>
    </item>
    
  </channel>
</rss>