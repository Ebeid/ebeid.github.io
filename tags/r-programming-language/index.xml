<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Programming Language on Ebeid ElSayed</title>
    <link>https://ebeid.github.io/tags/r-programming-language/</link>
    <description>Recent content in R Programming Language on Ebeid ElSayed</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 21 Jan 2013 09:40:00 -0600</lastBuildDate>
    
	<atom:link href="https://ebeid.github.io/tags/r-programming-language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to R – Charts and Graphics</title>
      <link>https://ebeid.github.io/blog/2013-01-21-introduction-to-r-charts-and-graphics.html/</link>
      <pubDate>Mon, 21 Jan 2013 09:40:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-21-introduction-to-r-charts-and-graphics.html/</guid>
      <description>R includes several packages for visualizing data:
 graphics contains plotting functions for the “base” graphing systems, including plot, hist, boxplot and many others. lattice contains code for producing Trellis graphics, which are independent of the “base” graphics system; including functions like xyplot, bwplot, levelplot. It built on grid which implements a different graphing system independent of the “base” system. grDevices contains all code implementing the various graphics devices, including X11, PDF, PostScript, PNG, etc.</description>
    </item>
    
    <item>
      <title>Introduction to R – Random Variables Generation &amp; Probability Distribution Functions</title>
      <link>https://ebeid.github.io/blog/2013-01-17-introduction-to-r-random-variables.html/</link>
      <pubDate>Thu, 17 Jan 2013 17:07:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-17-introduction-to-r-random-variables.html/</guid>
      <description>Simulation is important topic for statistical applications and scientific purposes in general.
Generating Random Numbers The first step in simulation is to generate random values based on your variables distribution. R has a large number of functions that generate the standard random variables.
for Normal random variable generationrnorm() simulate a simple random normal variable with a given mean and standard deviation and generate as many random values as requested.</description>
    </item>
    
    <item>
      <title>Introduction to R – Basic Debugging</title>
      <link>https://ebeid.github.io/blog/2013-01-16-introduction-to-r-basic-debugging.html/</link>
      <pubDate>Wed, 16 Jan 2013 17:38:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-16-introduction-to-r-basic-debugging.html/</guid>
      <description>In this post we will talk about native debugging support in R. Mostly, you start debugging when something goes wrong, which have many indications:
 message A generic notification/diagnostic message produced by the message function; execution of the function continues. warning An indication that something is wrong but not necessarily fatal; execution of the function continues; generated by the warning function; you got it after the function completion. error An indication that a fatal problem has occurred; execution stops; produced by the stop function.</description>
    </item>
    
    <item>
      <title>Introduction to R – Control Structures</title>
      <link>https://ebeid.github.io/blog/2013-01-15-introduction-to-r-control-structures.html/</link>
      <pubDate>Tue, 15 Jan 2013 16:43:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-15-introduction-to-r-control-structures.html/</guid>
      <description>Like every other programing language, R have control structures that allow you control the flow of your code execution.
If, else for testing a condition. else section is optional.

if it’s all about assigning a value to a variable, you can do like this

for for executing a loop for a fixed number of times. It takes a variable and assign it successive values from a sequence or vector.</description>
    </item>
    
    <item>
      <title>Introduction to R – Functions</title>
      <link>https://ebeid.github.io/blog/2013-01-13-introduction-to-r-functions.html/</link>
      <pubDate>Sun, 13 Jan 2013 14:42:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-13-introduction-to-r-functions.html/</guid>
      <description>Functions Functions are just like what you remember from math class. Most functions are in the following form: f(argument1, argument2, &amp;hellip;) Where f is the name of the function, and argument1, argument2, . . . are the arguments
to the function. Here are a few examples of built-in functions:
Note in the last example that if you give the argument in the default order, you can omit the names. Some built-in functions have operator form like the following examples:</description>
    </item>
    
    <item>
      <title>Introduction to R – Matrix Operations</title>
      <link>https://ebeid.github.io/blog/2013-01-12-introduction-to-r-matrix-operations.html/</link>
      <pubDate>Sat, 12 Jan 2013 13:53:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-12-introduction-to-r-matrix-operations.html/</guid>
      <description>Operations can be done on matrices in two fashions:
 Element-wise : where operations performed on corresponding elements in the matrices. Just use the desired operator.  
 Matrix-wise: where operations are performed on the whole matrices in the way you used to do in math. Use the desired operator between a couple of % %  
Stay tuned for more R notes.</description>
    </item>
    
    <item>
      <title>Introduction to R – Removing missing values</title>
      <link>https://ebeid.github.io/blog/2013-01-11-introduction-to-r-removing-missing.html/</link>
      <pubDate>Fri, 11 Jan 2013 13:53:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-11-introduction-to-r-removing-missing.html/</guid>
      <description>A common task in preparing you data is to remove missing values(NAs). One way to do that is to retrieve a vector of the missing values in your data, and then filter them out from your structure.

If you want to filter out the missing values from more than one vector , you can use complete.cases() to get the indices that contains good data in both vectors.

Here good will contain TRUE only for indices that hold good data in both vectors; FALSE otherwise.</description>
    </item>
    
    <item>
      <title>Introduction to R – Importing/Exporting Data to External Files</title>
      <link>https://ebeid.github.io/blog/2013-01-09-introduction-to-r-importingexporting.html/</link>
      <pubDate>Wed, 09 Jan 2013 17:56:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-09-introduction-to-r-importingexporting.html/</guid>
      <description>There are many functions that read/write data in R and export it files
read.table, read.csv for reading tabular data and return it in data frames from delimited files. read.csv is identical to read.table except that default separator is coma. There are so many arguments for these functions, the most commonly used arguments are:
 file : string –&amp;gt; file name or URL header : logical –&amp;gt; TRUE if the file first line is a header line, FALSE if first line is data.</description>
    </item>
    
    <item>
      <title>Introduction to R – Getting Started</title>
      <link>https://ebeid.github.io/blog/2013-01-09-introduction-to-r-getting-started.html/</link>
      <pubDate>Wed, 09 Jan 2013 10:19:00 -0600</pubDate>
      
      <guid>https://ebeid.github.io/blog/2013-01-09-introduction-to-r-getting-started.html/</guid>
      <description>R is an open source programming language and software environment for statistical computing and graphics. The R language is widely used among statisticians for developing statistical software and data analysis. R was created by Ross Ihakaand Robert Gentlemanat the University of Auckland, New Zealand, and now, R is developed by the R Development Core Team. To download R and install it on your computer, you can get it at the Comprehensive R Archive Network (http://cran.</description>
    </item>
    
  </channel>
</rss>