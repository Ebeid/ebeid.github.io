<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Testing on </title>
    <link>http://localhost:1313/tags/unit-testing/</link>
    <description>Recent content in Unit Testing on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Jul 2013 17:34:00 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing stateful components using Microsoft Pex</title>
      <link>http://localhost:1313/blog/testing-stateful-components-using-microsoft-pex/</link>
      <pubDate>Tue, 23 Jul 2013 17:34:00 -0500</pubDate>
      <guid>http://localhost:1313/blog/testing-stateful-components-using-microsoft-pex/</guid>
      <description>&lt;p&gt;&amp;lt;&amp;gt;&lt;br&gt;&#xA;Pattern. This pattern applies for statefull component x that expose members that may transition the state. For each member f(x), one defines a transition type Tf (x; o) which contains a method to invoke f(x) and where o is the test oracle.&lt;br&gt;&#xA;Let us illustrate this pattern with the XmlWriter class from the System.Xml library. This class contains a number of methods (Write&amp;hellip;) which have to be called in a particular order to build valid XML documents. The writer also exposes a WriteState property which gives a partial view on the state of the writer:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parameterized Models Patterns using Microsoft Pex</title>
      <link>http://localhost:1313/blog/parameterized-models-patterns-using-microsoft-pex/</link>
      <pubDate>Thu, 02 May 2013 16:45:00 -0500</pubDate>
      <guid>http://localhost:1313/blog/parameterized-models-patterns-using-microsoft-pex/</guid>
      <description>&lt;p&gt;Pex provides an infrastructure to implement parameterized models. We refer to parameterized models as they build on top of Pex infrastructure to generate new parameters on the fly, which we usually refer as &lt;strong&gt;choices&lt;/strong&gt;. Parameterized models can be used to replace traditional mocked-based testing as a single model captures all possible behavior.&lt;br&gt;&#xA;For a modeled component, instead of defining a single input/output pair as with mock objects, a parameterized model can specify a general input/output relationship, and it can use test parameters to act in various ways. In unit testing, mock objects are used to simulate the behavior of external components in order to test each component in isolation.&lt;br&gt;&#xA;Although mock object frameworks have greatly improve the usability in recent years, mock-based testing is still a tedious task. Note that the term mock object is used for somewhat different concepts by developers practicing unit testing. The meaning ranges from very simple (empty) stubs to complex and precise behavior with expected inputs and correctly computed outputs.&lt;br&gt;&#xA;Martin Fowler discusses this in detail &lt;a href=&#34;http://www.martinfowler.com/articles/mocksArentStubs.html&#34;&gt;here&lt;/a&gt;. In this sense, the first parameterized model patterns we present start out as simple stubs, but the patterns allow sophisticated models that assert expected inputs and restrict possible outputs.&lt;br&gt;&#xA;There are many frameworks that make it easy to write mock objects—for example, for .NET. Similar to how NUnit relates to Pex, these existing frameworks make it easy to manage mock objects—for example, by reducing the amount of code that must be written—but they do not help in exploring different behaviors. Note that Pex comes with a simple stubs framework. This framework was designed to be friendly with the kind of code analysis Pex does.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parameterized Test Patterns using Microsoft Pex</title>
      <link>http://localhost:1313/2013/05/parameterized-test-patterns-using.html</link>
      <pubDate>Thu, 02 May 2013 16:08:00 -0500</pubDate>
      <guid>http://localhost:1313/2013/05/parameterized-test-patterns-using.html</guid>
      <description>&lt;p&gt;We talked before about the difference between unit tests and parameterized unit tests. In this post we will talk about common patterns for writing good parameterized unit tests. Keep in mind that we will use these tests with Microsoft Pex (as an automatic test input generation tool) to get test inputs that trigger all the possible scenarios of the code-under-test.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Before anything, let’s clarify what are the questions we want to answer using the parameterized unit tests. There are  two core questions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asserts in NUnit</title>
      <link>http://localhost:1313/2011/10/asserts-in-nunit.html</link>
      <pubDate>Fri, 21 Oct 2011 12:19:00 -0500</pubDate>
      <guid>http://localhost:1313/2011/10/asserts-in-nunit.html</guid>
      <description>&lt;p&gt;Assertions (or asserts for short) are helper methods that can assist us in determining whether a method under test is performing correctly or not. They let us assert conditions, data, and so on. All assertion methods will report failures (that’s when the assertion is false) or errors (that’s when we get an unexpected exception) and report these through the NUnit test runner. when a failure or error occurs, execution of the current test method is aborted. Other Test within the same test fixture will still be run.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structuring unit tests in NUnit</title>
      <link>http://localhost:1313/2011/10/structuring-unit-tests-in-nunit.html</link>
      <pubDate>Fri, 21 Oct 2011 12:19:00 -0500</pubDate>
      <guid>http://localhost:1313/2011/10/structuring-unit-tests-in-nunit.html</guid>
      <description>&lt;p&gt;Our goal in the previous post Introduction to NUnit, was just to introduce the unit testing using NUnit as simple as possible. Now it is the time to elaborate more on NUnit framework, structuring and organizing your test cases. If you examined the test code again:&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode, .csharpcode pre&lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt; font-size: small;&lt;!-- raw HTML omitted --&gt; color: black;&lt;!-- raw HTML omitted --&gt; font-family: consolas, &amp;ldquo;Courier New&amp;rdquo;, courier, monospace;&lt;!-- raw HTML omitted --&gt; background-color: #ffffff;&lt;!-- raw HTML omitted --&gt; /*white-space: pre;*/&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode pre { margin: 0em; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .rem { color: #008000; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .kwrd { color: #0000ff; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .str { color: #006080; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .op { color: #0000c0; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .preproc { color: #cc6633; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .asp { background-color: #ffff00; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .html { color: #800000; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .attr { color: #ff0000; }&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .alt &lt;!-- raw HTML omitted --&gt;{&lt;!-- raw HTML omitted --&gt; background-color: #f4f4f4;&lt;!-- raw HTML omitted --&gt; width: 100%;&lt;!-- raw HTML omitted --&gt; margin: 0em;&lt;!-- raw HTML omitted --&gt;}&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.csharpcode .lnum { color: #606060; }&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to NUnit</title>
      <link>http://localhost:1313/2011/10/introduction-to-nunit.html</link>
      <pubDate>Fri, 21 Oct 2011 12:17:00 -0500</pubDate>
      <guid>http://localhost:1313/2011/10/introduction-to-nunit.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is unit testing?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;According to &lt;a href=&#34;http://www-128.ibm.com/developerworks/library/j-test.html&#34;&gt;Jeff Canna&lt;/a&gt;, unit testing ensures that a particular method of a class successfully performs a set of specific tasks. Each test confirms that a method produces the expected output when given a known input.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is NUnit?&lt;/strong&gt; NUnit is an open source framework that facilitates unit testing for all .NET languages. It allows you to build your test cases directly into the code of the project.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
